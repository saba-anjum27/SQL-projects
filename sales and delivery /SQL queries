
CREATE DATABASE mini_project_sales;
USE mini_project_sales;

SHOW TABLES;              
DESC cust_dimen;                            
DESC market_fact;                     
DESC orders_dimen;                  
DESC prod_dimen;                   
DESC shipping_dimen; 

 
-- changing data type for the required columns
ALTER TABLE orders_dimen MODIFY Order_Date DATE;
ALTER TABLE shipping_dimen MODIFY Ship_Date DATE;



-- To find the top 3 customers who have the maximum number of orders
select * from cust_dimen;
select * from market_fact;
SELECT 
    cd.cust_id,cd.customer_name, COUNT(mf.ord_id) AS number_of_orders
FROM
    cust_dimen cd
        INNER JOIN
    market_fact mf ON cd.cust_id = mf.cust_id
GROUP BY cd.cust_id
ORDER BY number_of_orders DESC
LIMIT 3;

/* This query uses an inner join between the customer dimension table and the market fact table 
on the common field of the customer ID. The COUNT function is used to count the number of order IDs 
in the market_fact table that match each customer ID.
GROUP BY groups the result set by the customer ID to ensure that (COUNT) is applied to each customer separately.
Overall, this SQL query is helpful in providing valuable insights for sales and marketing strategies.
*/

-- To create a new column DaysTakenForDelivery that contains the date difference between Order_Date and Ship_Date.
CREATE TABLE Delivery AS (
SELECT od.order_id,od.order_date, od.ord_id, sd.ship_id, sd.ship_date
FROM orders_dimen od INNER JOIN shipping_dimen sd ON od.ORDER_ID=sd.ORDER_ID);

ALTER TABLE Delivery ADD COLUMN DaysTakenForDelivery INT AS (DATEDIFF(ship_date,order_date)) ;
SELECT * FROM delivery;

/*
Here we created new table called Delivery and populated it with data from the orders_dimen and shipping_dimen tables using SELECT 
statement to retrieve columns from both tables and INNER JOIN operator to join the tables based on the order_id column.

The ALTER TABLE statement is used to add a new column to the Delivery table called DaysTakenForDelivery. The data type for 
this column is INT, and the value for each row is calculated using the DATEDIFF function which calculates the number of 
days between the ship_date and order_date columns in each row.
*/

-- To find the customer whose order took the maximum time to get delivered.
SELECT c.Cust_id, c.Customer_Name, d.order_id, d.DaysTakenForDelivery 
FROM delivery d INNER JOIN market_fact m ON d.ord_id=m.ord_id
INNER JOIN cust_dimen c ON m.Cust_id = c.Cust_id
ORDER BY DaysTakenForDelivery DESC LIMIT 1;

/*
Here we have used inner join between the delivery table and the market fact table on the common field of the order ID (ord_id). 
It then uses another inner join with the customer dimension table.
The ORDER BY clause sorts the result set in descending order of the number of days taken for delivery. 'LIMIT' clause 
limits the result set to only the first row.

This SQL query is useful for identifying the customer and order that have experienced the longest delay in 
delivery, which can be used for further analysis to identify any issues in the delivery process and improve customer 
satisfaction.  */


-- To retrieve total sales made by each product from the data (use Windows function)
select * from market_fact;
select distinct prod_id, 
round(sum(sales) OVER(partition by prod_id ),2) as total_sales
 from market_fact order by total_sales DESC;

/*  Here, DISTINCT keyword is used to retrieve only unique product IDs from the market fact table. 
SUM :- is used to calculate the total sales for each product ID by partitioning the result set by product ID 
using the OVER clause. This creates a separate group of rows for each product ID, and the SUM function is applied to each 
group to calculate the total sales.

This query is helps in analyzing the sales performance of different products and identifying the products 
with the highest total sales. The use of the SUM function with the OVER clause allows for the efficient calculation of 
total sales for each product, making the query faster and more efficient.   */



 -- To retrieve the total profit made from each product from the data (use windows function)
SELECT * FROM market_fact;
SELECT DISTINCT prod_id,
 ROUND(SUM(profit) OVER(PARTITION BY prod_id),2) AS total_product_profit
FROM market_fact order by total_product_profit desc;

select prod_id,sum(shipping_cost) from market_fact group by prod_id  order by sum(shipping_cost) desc;

/* Here we use SUM with the OVER clause to calculate the total profit for each product ID by partitioning the result set 
by product ID. This creates a separate group of rows for each product ID, and the SUM function is applied to each group to 
calculate the total profit.

This query is helps in analyzing the profit performance of different products and identifying the products 
with the highest total profit. The use of the SUM function with the OVER clause allows for the efficient calculation of 
total profit for each product, making the query faster and more efficient. 
*/

--  Counting the total number of unique customers in January 
-- and how many of them came back every month over the entire year in 2011

CREATE VIEW combined_table as(
SELECT  cd.customer_name,cd.cust_id,mf.ord_id,od.order_date
 FROM
     cust_dimen cd
        INNER JOIN
     market_fact mf ON cd.cust_id = mf.cust_id
         INNER JOIN
     orders_dimen od ON mf.ord_id = od.ord_id);

SELECT distinct Year(order_date), Month(order_date), 
count(cust_id) OVER(PARTITION BY month(order_date) order by month(order_date)) AS Total_Unique_Customers
FROM combined_table
WHERE year(order_date)=2011 AND cust_id
IN (SELECT DISTINCT cust_id
FROM combined_table
WHERE month(order_date)=1
AND year(order_date)=2011);

/* The first query creates a view called combined_table which combines data from three tables: cust_dimen, market_fact, and 
orders_dimen. It joins cust_dimen and market_fact on the cust_id column and market_fact and orders_dimen on the ord_id column.
The result is a combined view of the relevant data from these three tables, which is used in subsequent queries.    */

/* The second query retrieves the total number of unique customers for each month in the year 2011, using a window function 
and a subquery.
The SELECT statement selects distinct Year and Month values from the order_date column of the combined_table, and 
calculates the Total_Unique_Customers for each month.
The count(cust_id) OVER(PARTITION BY month(order_date) order by month(order_date)) calculates the count of unique cust_id 
values for each month using a window function, and assigns the result to the Total_Unique_Customers column.
The WHERE clause filters the result to only include records from the year 2011 and where the cust_id values are present in
the subquery. The subquery selects distinct cust_id values from the combined_table where the month is January and the year
is 2011. */

	
